{"version":3,"sources":["components/Form.jsx","components/CurrentInfo.jsx","components/Forecast.jsx","components/HourlyInfo.jsx","App.js","serviceWorker.js","index.js"],"names":["Form","react_default","a","createElement","className","onSubmit","this","props","getWetherData","type","name","placeholder","autoComplete","Component","CurrentInfo","_this$props$data","data","location","temp","feelsLike","windspeed","humidity","pressure","weatherDesc","weatherIcon","localtime","error","hours","Date","getHours","toString","padStart","minutes","getMinutes","src","alt","concat","Math","round","weekDays","Forecast","state","display","width","renderDayInfoElement","arguments","length","undefined","index","date","mintempC","maxtempC","hourly","weatherIconUrl","value","lang_ru","key","getDay","getDate","daysData","lib_default","dots","infinite","speed","slidesToShow","slidesToScroll","swipeToSlide","responsive","breakpoint","settings","map","timeLine","0","300","600","900","1200","1500","1800","2100","HourlyInfo","renderHourlyInfoElement","time","tempC","description","hourlyData","WETHER_API_KEY","App","_callee","e","cityName","api_url_response","_ref2","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","city","fetch","sent","json","_this","setState","request","query","current_condition","temp_C","FeelsLikeC","windspeedKmph","time_zone","weather","stop","getCityName","_callee2","ip_api_response","dataIP","_ref4","_context2","name_ru","abrupt","_this2","then","src_components_Form","src_components_CurrentInfo","src_components_HourlyInfo","src_components_Forecast","role","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cfded5f4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Form.css';\r\n\r\n\r\nclass Form extends Component {\r\n  render () {\r\n    return (\r\n      <div className=\"form-section\">\r\n        <form onSubmit={this.props.getWetherData} className=\"form\">\r\n          <input type=\"text\" name=\"city\" placeholder=\"Город\" autoComplete=\"off\"/>\r\n          <button type=\"submit\">Посмотреть погоду</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from 'react';\r\nimport './CurrentInfo.css';\r\n\r\n\r\nclass CurrentInfo extends Component {\r\n  render () {\r\n    const {location, temp, feelsLike, windspeed, humidity, pressure, weatherDesc, weatherIcon, localtime, error} = this.props.data;\r\n\r\n    let hours = new Date(localtime).getHours().toString().padStart(2, \"0\"),\r\n        minutes = new Date(localtime).getMinutes().toString().padStart(2, \"0\");\r\n\r\n    return (\r\n      <div className=\"currentinfo-section container\">\r\n      { location &&\r\n        <div>\r\n          <h3> {location} </h3>\r\n          <div className=\"currentinfo-main\">\r\n            <img src={weatherIcon} alt=\"weather-icon\"/>\r\n            <span className=\"current-temp\">{temp}°</span>\r\n          </div>\r\n          <p className=\"currentinfo-desc\"> {weatherDesc} </p>\r\n          <p className=\"update-info\"> Обновлено в {`${hours}:${minutes}`}</p>\r\n          <div className=\"additional-info\">\r\n            <div className=\"additional-items\">\r\n              <p> По ощущениям {feelsLike}° </p>\r\n              <p> Ветер {windspeed}км/ч </p>\r\n            </div>\r\n            <div className=\"additional-items\">\r\n              <p> Влажность {humidity}% </p>\r\n              <p> Давление {Math.round(pressure/1.33322)}мм </p>\r\n            </div>\r\n          </div>\r\n       </div>\r\n      }\r\n      <p>{error}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CurrentInfo;\r\n","import React, { Component } from 'react';\r\nimport Slider from 'react-slick';\r\nimport './Forecast.css';\r\n\r\nconst weekDays = [\"Вс.\", \"Пн.\", \"Вт.\", \"Ср.\", \"Чт.\", \"Пт.\", \"Сб.\"]\r\n\r\nclass Forecast extends Component {\r\n  state = {\r\n    display: true,\r\n    width: 600\r\n  };\r\n\r\n    renderDayInfoElement = (data = [], index) => {\r\n           const {date, mintempC, maxtempC} = data,\r\n                  weatherIcon = data.hourly[4].weatherIconUrl[0].value,\r\n                  weatherDesc = data.hourly[4].lang_ru[0].value;\r\n\r\n           return (\r\n             <div key={index} className=\"daysinfo-item\">\r\n               <div className=\"dayinfo-content\">\r\n                 <p>{`${weekDays[new Date(date).getDay()]} ${new Date(date).getDate()}`}</p>\r\n                 <img src={weatherIcon} alt=\"weather-icon\"/>\r\n                 <p className=\"daysinfo-temp\">{mintempC}°  <span>{maxtempC}°</span></p>\r\n                 <p className=\"daysinfo-description\">{weatherDesc}</p>\r\n               </div>\r\n             </div>);\r\n       }\r\n\r\n    render () {\r\n      const {daysData} = this.props.data;\r\n\r\n      const settings = {\r\n        dots: false,\r\n        infinite: false,\r\n        speed: 500,\r\n        slidesToShow: 5,\r\n        slidesToScroll: 3,\r\n        swipeToSlide: true,\r\n        responsive: [\r\n        {\r\n          breakpoint: 768,\r\n          settings: {\r\n            slidesToShow: 4,\r\n            slidesToScroll: 1\r\n          }\r\n        },\r\n        {\r\n          breakpoint: 576,\r\n          settings: {\r\n            slidesToShow: 3,\r\n            slidesToScroll: 1\r\n          }\r\n        },\r\n        {\r\n          breakpoint: 320,\r\n          settings: {\r\n            slidesToShow: 2,\r\n            slidesToScroll: 1\r\n          }\r\n        }\r\n      ]\r\n      };\r\n\r\n      return (\r\n        <div className=\"forecast-section\">\r\n          {daysData === undefined ? '' : <h4>Погода в ближайшие дни</h4>}\r\n          <Slider {...settings}>\r\n            {daysData === undefined ? '' : daysData.map(this.renderDayInfoElement)}\r\n          </Slider>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default Forecast;\r\n","import React, { Component } from 'react';\r\nimport Slider from 'react-slick';\r\nimport './HourlyInfo.css';\r\n\r\n\r\nconst timeLine = {\r\n  0: '00:00',\r\n  300: '03:00',\r\n  600: '06:00',\r\n  900: '09:00',\r\n  1200: '12:00',\r\n  1500: '15:00',\r\n  1800: '18:00',\r\n  2100: '21:00',\r\n};\r\n//\r\n\r\nclass HourlyInfo extends Component {\r\n\r\n  renderHourlyInfoElement = (data = [], index) => {\r\n         const {time, tempC} = data,\r\n                weatherIcon = data.weatherIconUrl[0].value,\r\n                description = data.lang_ru[0].value;\r\n         return (\r\n          <div key={index} className=\"hourlyinfo-item\">\r\n           <div className=\"hourlyinfo-content\">\r\n             <p>{timeLine[time]}</p>\r\n             <img src={weatherIcon} alt=\"weatherIcon\"/>\r\n             <p className=\"hourlyinfo-temp\">{tempC}°</p>\r\n             <p className=\"hourlyinfo-description\">{description}</p>\r\n           </div>\r\n          </div>\r\n       );\r\n     }\r\n\r\n  render() {\r\n    const {hourlyData} = this.props.data;\r\n    const settings = {\r\n      dots: false,\r\n      infinite: false,\r\n      speed: 500,\r\n      slidesToShow: 5,\r\n      slidesToScroll: 3,\r\n      swipeToSlide: true,\r\n      responsive: [\r\n      {\r\n        breakpoint: 768,\r\n        settings: {\r\n          slidesToShow: 4,\r\n          slidesToScroll: 1\r\n        }\r\n      },\r\n      {\r\n        breakpoint: 576,\r\n        settings: {\r\n          slidesToShow: 3,\r\n          slidesToScroll: 1\r\n        }\r\n      },\r\n      {\r\n        breakpoint: 320,\r\n        settings: {\r\n          slidesToShow: 2,\r\n          slidesToScroll: 1\r\n        }\r\n      }\r\n    ]\r\n    };\r\n\r\n    return (\r\n      <div className=\"hourlyinfo__section\">\r\n        {hourlyData === undefined ? '' : <h4>Погода в течении дня</h4>}\r\n        <Slider {...settings} >\r\n            {hourlyData === undefined ? '' : hourlyData.map(this.renderHourlyInfoElement)}\r\n        </Slider>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HourlyInfo;\r\n","import React, { Component } from 'react';\r\nimport Form from './components/Form';\r\nimport CurrentInfo from './components/CurrentInfo';\r\nimport Forecast from './components/Forecast';\r\nimport HourlyInfo from './components/HourlyInfo';\r\n\r\n\r\nconst WETHER_API_KEY = \"47fa2bde9d2c41b385783953191601\";\r\n\r\nclass App extends Component {\r\n\r\n  state = {};\r\n\r\ngetWetherData = async (e) => {\r\n  e.preventDefault();\r\n\r\n  let cityName = e.target.elements.city.value\r\n\r\n  if (cityName) {\r\n    const api_url_response = await\r\n    fetch(`https://api.worldweatheronline.com/premium/v1/weather.ashx?key=${WETHER_API_KEY}&lang=ru&q=${cityName}&showlocaltime=yes&mca=no&format=json`);\r\n\r\n    const { data } = await api_url_response.json();\r\n\r\n    if (data.error) {\r\n      this.setState({\r\n        data: {\r\n          error: \"Местоположение не найдено\"\r\n        }\r\n      });\r\n    } else {this.setState({\r\n        data: {\r\n          location: data.request[0].query,\r\n          weatherDesc: data.current_condition[0].lang_ru[0].value,\r\n          temp: data.current_condition[0].temp_C,\r\n          feelsLike: data.current_condition[0].FeelsLikeC,\r\n          humidity: data.current_condition[0].humidity,\r\n          windspeed: data.current_condition[0].windspeedKmph,\r\n          pressure: data.current_condition[0].pressure,\r\n          weatherIcon: data.current_condition[0].weatherIconUrl[0].value,\r\n          localtime: data.time_zone[0].localtime,\r\n          hourlyData: data.weather[0].hourly,\r\n          daysData: data.weather\r\n        }\r\n      });\r\n    }\r\n  } else {\r\n    this.setState({\r\n      data: {\r\n        error: \"Введите название города!\"\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n\r\ngetCityName = async () => {\r\n  const ip_api_response = await\r\n  fetch(`https://api.sypexgeo.net/json/`);\r\n\r\n  const dataIP = await ip_api_response.json(),\r\n        city = dataIP.city.name_ru;\r\n\r\n  const api_url_response = await\r\n  fetch(`https://api.worldweatheronline.com/premium/v1/weather.ashx?key=${WETHER_API_KEY}&lang=ru&q=${city}&showlocaltime=yes&mca=no&format=json`);\r\n\r\n  const { data } = await api_url_response.json();\r\n\r\n  return data;\r\n}\r\n\r\ncomponentDidMount() {\r\n        this.getCityName()\r\n        .then(data => {\r\n          this.setState({\r\n            data: {\r\n              location: data.request[0].query,\r\n              weatherDesc: data.current_condition[0].lang_ru[0].value,\r\n              temp: data.current_condition[0].temp_C,\r\n              feelsLike: data.current_condition[0].FeelsLikeC,\r\n              humidity: data.current_condition[0].humidity,\r\n              windspeed: data.current_condition[0].windspeedKmph,\r\n              pressure: data.current_condition[0].pressure,\r\n              weatherIcon: data.current_condition[0].weatherIconUrl[0].value,\r\n              localtime: data.time_zone[0].localtime,\r\n              hourlyData: data.weather[0].hourly,\r\n              daysData: data.weather\r\n            }\r\n          });\r\n        });\r\n    }\r\n\r\n\r\n  render() {\r\n    const {data} = this.state;\r\n\r\n    if (!data) {\r\n      return (\r\n        <div className=\"d-flex justify-content-center align-items-center spinner\">\r\n          <div className=\"spinner-border\" role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"app\">\r\n        <div>\r\n          <Form getWetherData={this.getWetherData} />\r\n          <CurrentInfo data = {this.state.data} />\r\n          <HourlyInfo data = {this.state.data} />\r\n          <Forecast data = {this.state.data} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}